# AWS OCR PDF Processing Infrastructure

This project demonstrates a complete, production-grade setup for processing PDF files using OCR (Optical Character Recognition) leveraging AWS services including EC2, ECS (Fargate), SQS, S3, and ECR. The infrastructure is provisioned using Terraform.

---

## Project Structure

```bash
.
├── OCR
│   ├── Dockerfile          # Dockerfile for OCR worker
│   └── ocr_worker.py       # OCR processing script
├── terraform
│   ├── main.tf             # Main Terraform configuration
│   ├── variables.tf        # Terraform input variables
│   └── vpc.tf              # Terraform configuration for VPC and networking
├── Dockerfile              # Dockerfile for PDF uploader (EC2 Client)
├── process.py              # PDF processing script for EC2 client
├── requirements.txt        # Python dependencies
└── send_ocr_request.py     # Script to send OCR requests to SQS
```

---

## Services & Architecture

### Components:
- **VPC:** Isolated networking environment
- **Public Subnets:** Two availability zones for high availability
- **S3:** Storage for input PDFs and processed (OCR) PDFs
- **ECS (Fargate):** Runs OCR worker container
- **EC2:** Runs the PDF uploader client
- **SQS:** Queue for managing OCR tasks
- **ECR:** Container registry for both EC2 client and ECS worker images

### Workflow:
1. **Upload PDF**: PDF uploaded to input S3 bucket.
2. **Queue Task**: EC2 client sends a message to SQS with the PDF location.
3. **OCR Worker**: ECS worker (Fargate) retrieves tasks from SQS, processes PDFs using OCRMyPDF.
4. **Result Storage**: Processed PDFs are stored in the output S3 bucket.

---

## Prerequisites
- AWS CLI installed and configured
- Terraform installed
- Docker installed
- SSH key pair created for EC2 instance

---

## Setup & Deployment

### 1. Terraform Initialization

```bash
cd terraform
terraform init
```

### 2. Terraform Plan & Apply

Review the plan and apply the infrastructure:

```bash
terraform plan
terraform apply
```

### 3. Docker Image Build & Push

#### ECS Worker

```bash
cd OCR
aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin <ecs-worker-repo-url>
docker build -t ecs-worker .
docker tag ecs-worker:latest <ecs-worker-repo-url>:latest
docker push <ecs-worker-repo-url>:latest
```

#### EC2 Client

```bash
aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin <ec2-client-repo-url>
docker build -t ec2-client .
docker tag ec2-client:latest <ec2-client-repo-url>:latest
docker push <ec2-client-repo-url>:latest
```

---

## Environment Variables (EC2 & ECS)

Set these environment variables in your EC2 instance and ECS task:

- `AWS_REGION`: Your AWS region (e.g., `eu-central-1`)
- `SQS_QUEUE_URL`: URL of your SQS queue
- `INPUT_S3_URI`: S3 URI for the input PDF
- `OUTPUT_S3_URI`: S3 URI where processed PDF will be stored

---

## Security Recommendations
- Restrict SSH (`port 22`) access to your IP address.
- Configure IAM policies strictly, avoiding `"*"` actions or resources in production.
- Store sensitive data in AWS Secrets Manager instead of environment variables.

---

## Cleanup

To delete all infrastructure created by Terraform:

```bash
terraform destroy
```

---

## Contributing
Feel free to create issues and PRs for suggestions or improvements.

